{"ast":null,"code":"var _jsxFileName = \"C:\\\\reactProject\\\\react-basic\\\\habit-tracker\\\\src\\\\components\\\\habits.jsx\";\nimport React, { Component } from 'react';\nimport Habit from './habit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Habits extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      habits: [// 배열일 경우 key 값을 지정해줘야 함. 고유의 값으로! (index는 key 값이 될 수 없음)\n      {\n        id: 1,\n        name: 'Reading',\n        count: 0\n      }, {\n        id: 2,\n        name: 'Running',\n        count: 0\n      }, {\n        id: 3,\n        name: 'Coding',\n        count: 0\n      }]\n    };\n\n    this.handleIncrement = habit => {\n      //callback 함수\n      console.log(`handleIncrement ${habit.name}`); // state를 직접 수정 (이 방법 사용X)\n      // habit.count++;\n      // this.setState(this.state);\n      // react에서는 state를 직접 수정하면 안됌. 따라서 위 주석과 같이 코딩하지 않고 아래와 같이 새로운 배열을 만들어 수정\n\n      const habits = [...this.state.habits]; // ... : spread operator : 각각의 데이터를 복사\n\n      const index = habits.indexOf(habit);\n      habits[index].count++;\n      this.setState({\n        habits: habits\n      }); // key:value = habits(state에 정의된 habits 배열명) : habits (새로 정의한 배열명)\n      // =  this.setState({habits}); - key와 value의 이름이 같을 경우 하나로 생략 가능\n    };\n\n    this.handleDecrement = habit => {\n      console.log(`handleDecrement ${habit.name}`);\n      const habits = [...this.state.habits];\n      const index = habits.indexOf(habit);\n      const count = habits[index].count - 1;\n      habits[index].count = count < 0 ? 0 : count;\n      this.setState({\n        habits: habits\n      });\n    };\n\n    this.handleDelete = habit => {\n      console.log(`handleDelete ${habit.name}`);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: this.state.habits.map(habit => /*#__PURE__*/_jsxDEV(Habit, {\n        /* habit이라는 props에 habit(map의 item) 전달, 배열인 경우 prop key값 지정 */\n        habit: habit,\n        onIncrement: this.handleIncrement,\n        onDecrement: this.handleDecrement,\n        onDelete: this.handleDelete\n      }, habit.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Habits;","map":{"version":3,"names":["React","Component","Habit","Habits","state","habits","id","name","count","handleIncrement","habit","console","log","index","indexOf","setState","handleDecrement","handleDelete","render","map"],"sources":["C:/reactProject/react-basic/habit-tracker/src/components/habits.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Habit from './habit';\r\n\r\nclass Habits extends Component {\r\n    state = {\r\n        habits: [ // 배열일 경우 key 값을 지정해줘야 함. 고유의 값으로! (index는 key 값이 될 수 없음)\r\n            {id: 1, name: 'Reading', count: 0},\r\n            {id: 2, name: 'Running', count: 0},\r\n            {id: 3, name: 'Coding', count: 0},\r\n        ],\r\n    };\r\n\r\n    handleIncrement = (habit) => { //callback 함수\r\n        console.log(`handleIncrement ${habit.name}`);\r\n\r\n        // state를 직접 수정 (이 방법 사용X)\r\n        // habit.count++;\r\n        // this.setState(this.state);\r\n        \r\n        // react에서는 state를 직접 수정하면 안됌. 따라서 위 주석과 같이 코딩하지 않고 아래와 같이 새로운 배열을 만들어 수정\r\n        const habits = [...this.state.habits]; // ... : spread operator : 각각의 데이터를 복사\r\n        const index = habits.indexOf(habit);\r\n        habits[index].count++;\r\n        this.setState({habits: habits}); // key:value = habits(state에 정의된 habits 배열명) : habits (새로 정의한 배열명)\r\n        // =  this.setState({habits}); - key와 value의 이름이 같을 경우 하나로 생략 가능\r\n    };\r\n\r\n    handleDecrement = (habit) => {\r\n        console.log(`handleDecrement ${habit.name}`);\r\n\r\n        const habits = [...this.state.habits];\r\n        const index = habits.indexOf(habit);\r\n        const count = habits[index].count -1;\r\n        habits[index].count = count < 0 ? 0 : count;\r\n        this.setState({habits:habits});\r\n    };\r\n\r\n    handleDelete = (habit) => {\r\n        console.log(`handleDelete ${habit.name}`);\r\n    };\r\n\r\n    render() {\r\n        return ( \r\n        <ul>\r\n            {this.state.habits.map(habit => (\r\n                <Habit \r\n                    key={habit.id} /* habit이라는 props에 habit(map의 item) 전달, 배열인 경우 prop key값 지정 */\r\n                    habit={habit}  \r\n                    onIncrement={this.handleIncrement} \r\n                    onDecrement={this.handleDecrement} \r\n                    onDelete={this.handleDelete}\r\n                /> \r\n            ))}\r\n        </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Habits;"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;EAAA;IAAA;IAAA,KAC3BG,KAD2B,GACnB;MACJC,MAAM,EAAE,CAAE;MACN;QAACC,EAAE,EAAE,CAAL;QAAQC,IAAI,EAAE,SAAd;QAAyBC,KAAK,EAAE;MAAhC,CADI,EAEJ;QAACF,EAAE,EAAE,CAAL;QAAQC,IAAI,EAAE,SAAd;QAAyBC,KAAK,EAAE;MAAhC,CAFI,EAGJ;QAACF,EAAE,EAAE,CAAL;QAAQC,IAAI,EAAE,QAAd;QAAwBC,KAAK,EAAE;MAA/B,CAHI;IADJ,CADmB;;IAAA,KAS3BC,eAT2B,GASRC,KAAD,IAAW;MAAE;MAC3BC,OAAO,CAACC,GAAR,CAAa,mBAAkBF,KAAK,CAACH,IAAK,EAA1C,EADyB,CAGzB;MACA;MACA;MAEA;;MACA,MAAMF,MAAM,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,MAAf,CAAf,CARyB,CAQc;;MACvC,MAAMQ,KAAK,GAAGR,MAAM,CAACS,OAAP,CAAeJ,KAAf,CAAd;MACAL,MAAM,CAACQ,KAAD,CAAN,CAAcL,KAAd;MACA,KAAKO,QAAL,CAAc;QAACV,MAAM,EAAEA;MAAT,CAAd,EAXyB,CAWQ;MACjC;IACH,CAtB0B;;IAAA,KAwB3BW,eAxB2B,GAwBRN,KAAD,IAAW;MACzBC,OAAO,CAACC,GAAR,CAAa,mBAAkBF,KAAK,CAACH,IAAK,EAA1C;MAEA,MAAMF,MAAM,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,MAAf,CAAf;MACA,MAAMQ,KAAK,GAAGR,MAAM,CAACS,OAAP,CAAeJ,KAAf,CAAd;MACA,MAAMF,KAAK,GAAGH,MAAM,CAACQ,KAAD,CAAN,CAAcL,KAAd,GAAqB,CAAnC;MACAH,MAAM,CAACQ,KAAD,CAAN,CAAcL,KAAd,GAAsBA,KAAK,GAAG,CAAR,GAAY,CAAZ,GAAgBA,KAAtC;MACA,KAAKO,QAAL,CAAc;QAACV,MAAM,EAACA;MAAR,CAAd;IACH,CAhC0B;;IAAA,KAkC3BY,YAlC2B,GAkCXP,KAAD,IAAW;MACtBC,OAAO,CAACC,GAAR,CAAa,gBAAeF,KAAK,CAACH,IAAK,EAAvC;IACH,CApC0B;EAAA;;EAsC3BW,MAAM,GAAG;IACL,oBACA;MAAA,UACK,KAAKd,KAAL,CAAWC,MAAX,CAAkBc,GAAlB,CAAsBT,KAAK,iBACxB,QAAC,KAAD;QACmB;QACf,KAAK,EAAEA,KAFX;QAGI,WAAW,EAAE,KAAKD,eAHtB;QAII,WAAW,EAAE,KAAKO,eAJtB;QAKI,QAAQ,EAAE,KAAKC;MALnB,GACSP,KAAK,CAACJ,EADf;QAAA;QAAA;QAAA;MAAA,QADH;IADL;MAAA;MAAA;MAAA;IAAA,QADA;EAaH;;AApD0B;;AAuD/B,eAAeH,MAAf"},"metadata":{},"sourceType":"module"}