{"ast":null,"code":"var _jsxFileName = \"C:\\\\reactProject\\\\react-basic\\\\habit-tracker\\\\src\\\\app.jsx\";\nimport React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      habits: [// 배열일 경우 key 값을 지정해줘야 함. 고유의 값으로! (index는 key 값이 될 수 없음)\n      {\n        id: 1,\n        name: 'Reading',\n        count: 0\n      }, {\n        id: 2,\n        name: 'Running',\n        count: 0\n      }, {\n        id: 3,\n        name: 'Coding',\n        count: 0\n      }]\n    };\n\n    this.handleIncrement = habit => {\n      //callback 함수\n      //console.log(`handleIncrement ${habit.name}`);\n      // state를 직접 수정 (이 방법 사용X)\n      // habit.count++;\n      // this.setState(this.state);\n      // react에서는 state를 직접 수정하면 안됌. 따라서 위 주석과 같이 코딩하지 않고 아래와 같이 새로운 배열을 만들어 수정\n      const habits = [...this.state.habits]; // ... : spread operator : 각각의 데이터를 복사\n\n      const index = habits.indexOf(habit);\n      habits[index].count++;\n      this.setState({\n        habits: habits\n      }); // key:value = habits(state에 정의된 habits 배열명) : habits (새로 정의한 배열명)\n      // =  this.setState({habits}); - key와 value의 이름이 같을 경우 하나로 생략 가능\n    };\n\n    this.handleDecrement = habit => {\n      //console.log(`handleDecrement ${habit.name}`);\n      const habits = [...this.state.habits];\n      const index = habits.indexOf(habit);\n      const count = habits[index].count - 1;\n      habits[index].count = count < 0 ? 0 : count;\n      this.setState({\n        habits: habits\n      });\n    };\n\n    this.handleDelete = habit => {\n      //console.log(`handleDelete ${habit.name}`);\n      const habits = this.state.habits.filter(item => item.id !== habit.id);\n      this.setState({\n        habits: habits\n      });\n    };\n\n    this.handleAdd = () => {\n      const habitsCount = this.state.habits.length;\n      const add = [{\n        id: habitsCount + 1,\n        name: \"la\",\n        count: 0\n      }];\n      const habits = [...this.state.habits, add];\n      this.setState({\n        habits\n      });\n    };\n\n    this.handleRest = () => {\n      const habits = [{\n        id: 1,\n        name: 'Reading',\n        count: 0\n      }, {\n        id: 2,\n        name: 'Running',\n        count: 0\n      }, {\n        id: 3,\n        name: 'Coding',\n        count: 0\n      }];\n      this.setState({\n        habits\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        totalCount: this.state.habits.filter(item => item.count > 0).length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"habit-add\",\n        placeholder: \"Habit\",\n        name: \"inputhabit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"habit-btn\",\n        onClick: this.handleAdd,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Habits, {\n        habits: this.state.habits,\n        onIncrement: this.handleIncrement,\n        onDecrement: this.handleDecrement,\n        onDelete: this.handleDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"habit-btn\",\n        onClick: this.handleRest,\n        children: \"Reset All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Component","Habits","Navbar","App","state","habits","id","name","count","handleIncrement","habit","index","indexOf","setState","handleDecrement","handleDelete","filter","item","handleAdd","habitsCount","length","add","handleRest","render"],"sources":["C:/reactProject/react-basic/habit-tracker/src/app.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\n\nclass App extends Component {\n  state = {\n    habits: [ // 배열일 경우 key 값을 지정해줘야 함. 고유의 값으로! (index는 key 값이 될 수 없음)\n      { id: 1, name: 'Reading', count: 0 },\n      { id: 2, name: 'Running', count: 0 },\n      { id: 3, name: 'Coding', count: 0 },\n    ],\n  };\n\n  handleIncrement = (habit) => { //callback 함수\n    //console.log(`handleIncrement ${habit.name}`);\n\n    // state를 직접 수정 (이 방법 사용X)\n    // habit.count++;\n    // this.setState(this.state);\n\n    // react에서는 state를 직접 수정하면 안됌. 따라서 위 주석과 같이 코딩하지 않고 아래와 같이 새로운 배열을 만들어 수정\n    const habits = [...this.state.habits]; // ... : spread operator : 각각의 데이터를 복사\n    const index = habits.indexOf(habit);\n    habits[index].count++;\n    this.setState({ habits: habits }); // key:value = habits(state에 정의된 habits 배열명) : habits (새로 정의한 배열명)\n    // =  this.setState({habits}); - key와 value의 이름이 같을 경우 하나로 생략 가능\n  };\n\n  handleDecrement = (habit) => {\n    //console.log(`handleDecrement ${habit.name}`);\n\n    const habits = [...this.state.habits];\n    const index = habits.indexOf(habit);\n    const count = habits[index].count - 1;\n    habits[index].count = count < 0 ? 0 : count;\n    this.setState({ habits: habits });\n  };\n\n  handleDelete = (habit) => {\n    //console.log(`handleDelete ${habit.name}`);\n\n    const habits = this.state.habits.filter(item => item.id !== habit.id);\n    this.setState({ habits: habits });\n  };\n\n  handleAdd = () => {\n    const habitsCount = this.state.habits.length;\n    const add = [\n      {\n        id: habitsCount + 1,\n        name: \"la\",\n        count: 0\n      }\n    ];\n    const habits = [...this.state.habits, add];\n    this.setState({ habits });\n  };\n\n  handleRest = () => {\n    const habits = [\n      { id: 1, name: 'Reading', count: 0 },\n      { id: 2, name: 'Running', count: 0 },\n      { id: 3, name: 'Coding', count: 0 },\n    ];\n    this.setState({ habits });\n\n  };\n\n  render() {\n    return (\n      <>\n        <Navbar totalCount={this.state.habits.filter(item => item.count > 0).length} />\n        <input className=\"habit-add\" placeholder='Habit' name=\"inputhabit\" />\n        <button className=\"habit-btn\" onClick={this.handleAdd}>Add</button>\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete} />\n        <button className='habit-btn' onClick={this.handleRest}>Reset All</button>\n      </>\n    );\n  }\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}