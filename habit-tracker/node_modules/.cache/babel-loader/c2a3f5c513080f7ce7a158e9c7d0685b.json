{"ast":null,"code":"var _jsxFileName = \"C:\\\\reactProject\\\\react-basic\\\\habit-tracker\\\\src\\\\app.jsx\";\nimport { hasFormSubmit } from '@testing-library/user-event/dist/utils';\nimport React, { Component } from 'react';\nimport './app.css';\nimport HabitAddForm from './components/habitAddForm';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      habits: [// 배열일 경우 key 값을 지정해줘야 함. 고유의 값으로! (index는 key 값이 될 수 없음)\n      {\n        id: 1,\n        name: 'Reading',\n        count: 0\n      }, {\n        id: 2,\n        name: 'Running',\n        count: 0\n      }, {\n        id: 3,\n        name: 'Coding',\n        count: 0\n      }]\n    };\n\n    this.handleIncrement = habit => {\n      //callback 함수\n      //console.log(`handleIncrement ${habit.name}`);\n      // state를 직접 수정 (이 방법 사용X)\n      // habit.count++;\n      // this.setState(this.state);\n      // react에서는 state를 직접 수정하면 안됌. 따라서 위 주석과 같이 코딩하지 않고 아래와 같이 새로운 배열을 만들어 수정\n      // const habits = [...this.state.habits]; // ... : spread operator : 각각의 데이터를 복사\n      // const index = habits.indexOf(habit);\n      // habits[index].count++;\n      // this.setState({ habits: habits }); // key:value = habits(state에 정의된 habits 배열명) : habits (새로 정의한 배열명)\n      // =  this.setState({habits}); - key와 value의 이름이 같을 경우 하나로 생략 가능\n      // object는 불변의 object로 놔두고 변경 필요 시 새로운 object를 생성하는 것이 좋음(아래 코드 참조). 위 코드는 기능 구현은 가능하지만 좋은 코드는 아님\n      const habits = this.state.habits.map(item => {\n        if (item.id === habit.id) {\n          return { ...habit,\n            count: habit.count + 1\n          }; // map으로 기존 state.habits을 돌면서 선택한 id와 같다면 새로운 habit에 object를 만드는데 count를 1만큼 증가시켜서 만들고\n        } else {\n          return item; // id가 다르다면 업데이트 할 필요가 없기 때문에 기존의 똑같은 item 사용\n        }\n      });\n      this.setState({\n        habits\n      });\n    };\n\n    this.handleDecrement = habit => {\n      //console.log(`handleDecrement ${habit.name}`);\n      // const habits = [...this.state.habits];\n      // const index = habits.indexOf(habit);\n      // const count = habits[index].count - 1;\n      // habits[index].count = count < 0 ? 0 : count;\n      // this.setState({ habits: habits });\n      const habits = this.state.habits.map(item => {\n        if (item.id === habit.id) {\n          return { ...habit,\n            count: habit.count - 1 < 0 ? 0 : count\n          };\n        } else {\n          return item;\n        }\n      });\n      this.setState({\n        habits\n      });\n    };\n\n    this.handleDelete = habit => {\n      //console.log(`handleDelete ${habit.name}`);\n      const habits = this.state.habits.filter(item => item.id !== habit.id);\n      this.setState({\n        habits: habits\n      });\n    };\n\n    this.handleAdd = name => {\n      const habits = [...this.state.habits, {\n        id: Date.now(),\n        name: name,\n        count: 0\n      }]; // const habits = [...this.state.habits, {id: Date.now(), name, count: 0}] : 위와 동일 - name:name 둘 다 동일할 경우 하나만 써서 생략가능\n\n      this.setState({\n        habits\n      });\n    };\n\n    this.handleReset = () => {\n      const habits = this.state.habits.map(habit => {\n        habit.count = 0;\n        return habit;\n      });\n      this.setState({\n        habits\n      });\n    };\n  }\n\n  render() {\n    console.log('app');\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        totalCount: this.state.habits.filter(item => item.count > 0).length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Habits, {\n        habits: this.state.habits,\n        onIncrement: this.handleIncrement,\n        onDecrement: this.handleDecrement,\n        onDelete: this.handleDelete,\n        onAdd: this.handleAdd,\n        onReset: this.handleReset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["hasFormSubmit","React","Component","HabitAddForm","Habits","Navbar","App","state","habits","id","name","count","handleIncrement","habit","map","item","setState","handleDecrement","handleDelete","filter","handleAdd","Date","now","handleReset","render","console","log","length"],"sources":["C:/reactProject/react-basic/habit-tracker/src/app.jsx"],"sourcesContent":["import { hasFormSubmit } from '@testing-library/user-event/dist/utils';\nimport React, { Component } from 'react';\nimport './app.css';\nimport HabitAddForm from './components/habitAddForm';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\n\nclass App extends Component {\n  state = {\n    habits: [ // 배열일 경우 key 값을 지정해줘야 함. 고유의 값으로! (index는 key 값이 될 수 없음)\n      { id: 1, name: 'Reading', count: 0 },\n      { id: 2, name: 'Running', count: 0 },\n      { id: 3, name: 'Coding', count: 0 },\n    ],\n  };\n\n  handleIncrement = (habit) => { //callback 함수\n    //console.log(`handleIncrement ${habit.name}`);\n\n    // state를 직접 수정 (이 방법 사용X)\n    // habit.count++;\n    // this.setState(this.state);\n\n    // react에서는 state를 직접 수정하면 안됌. 따라서 위 주석과 같이 코딩하지 않고 아래와 같이 새로운 배열을 만들어 수정\n    // const habits = [...this.state.habits]; // ... : spread operator : 각각의 데이터를 복사\n    // const index = habits.indexOf(habit);\n    // habits[index].count++;\n    // this.setState({ habits: habits }); // key:value = habits(state에 정의된 habits 배열명) : habits (새로 정의한 배열명)\n    // =  this.setState({habits}); - key와 value의 이름이 같을 경우 하나로 생략 가능\n\n\n    // object는 불변의 object로 놔두고 변경 필요 시 새로운 object를 생성하는 것이 좋음(아래 코드 참조). 위 코드는 기능 구현은 가능하지만 좋은 코드는 아님\n    const habits = this.state.habits.map(item => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 }; // map으로 기존 state.habits을 돌면서 선택한 id와 같다면 새로운 habit에 object를 만드는데 count를 1만큼 증가시켜서 만들고\n      } else {\n        return item; // id가 다르다면 업데이트 할 필요가 없기 때문에 기존의 똑같은 item 사용\n      }\n    });\n    this.setState({ habits });\n  };\n\n  handleDecrement = (habit) => {\n    //console.log(`handleDecrement ${habit.name}`);\n\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // const count = habits[index].count - 1;\n    // habits[index].count = count < 0 ? 0 : count;\n    // this.setState({ habits: habits });\n\n    const habits = this.state.habits.map(item => {\n      if (item.id === habit.id) {\n        return { ...habit, count: (habit.count - 1) < 0 ? 0 : count };\n      } else {\n        return item;\n      }\n    });\n    this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    //console.log(`handleDelete ${habit.name}`);\n\n    const habits = this.state.habits.filter(item => item.id !== habit.id);\n    this.setState({ habits: habits });\n  };\n\n  handleAdd = name => {\n    const habits = [...this.state.habits, { id: Date.now(), name: name, count: 0 }]\n    // const habits = [...this.state.habits, {id: Date.now(), name, count: 0}] : 위와 동일 - name:name 둘 다 동일할 경우 하나만 써서 생략가능\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = this.state.habits.map(habit => {\n      habit.count = 0;\n      return habit;\n    });\n    this.setState({ habits });\n  };\n\n  render() {\n    console.log('app');\n    return (\n      <>\n        <Navbar totalCount={this.state.habits.filter(item => item.count > 0).length} />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}