{"ast":null,"code":"var _jsxFileName = \"C:\\\\reactProject\\\\react-basic\\\\habit-tracker\\\\src\\\\components\\\\habits.jsx\";\nimport React, { Component } from 'react';\nimport Habit from './habit';\nimport Navbar from './navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Habits extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      habits: [// 배열일 경우 key 값을 지정해줘야 함. 고유의 값으로! (index는 key 값이 될 수 없음)\n      {\n        id: 1,\n        name: 'Reading',\n        count: 0\n      }, {\n        id: 2,\n        name: 'Running',\n        count: 0\n      }, {\n        id: 3,\n        name: 'Coding',\n        count: 0\n      }],\n      habitCount: 0\n    };\n\n    this.handleIncrement = habit => {\n      //callback 함수\n      //console.log(`handleIncrement ${habit.name}`);\n      // state를 직접 수정 (이 방법 사용X)\n      // habit.count++;\n      // this.setState(this.state);\n      // react에서는 state를 직접 수정하면 안됌. 따라서 위 주석과 같이 코딩하지 않고 아래와 같이 새로운 배열을 만들어 수정\n      const habits = [...this.state.habits]; // ... : spread operator : 각각의 데이터를 복사\n\n      const index = habits.indexOf(habit);\n      habits[index].count++;\n      this.setState({\n        habits: habits\n      }); // key:value = habits(state에 정의된 habits 배열명) : habits (새로 정의한 배열명)\n      // =  this.setState({habits}); - key와 value의 이름이 같을 경우 하나로 생략 가능\n\n      let habitCount = 0;\n\n      for (let i = 0; i < habits.length; i++) {\n        if (habits[i].count > 0) {\n          habitCount++;\n        }\n      }\n\n      this.setState({\n        habitCount\n      });\n    };\n\n    this.handleDecrement = habit => {\n      //console.log(`handleDecrement ${habit.name}`);\n      const habits = [...this.state.habits];\n      const index = habits.indexOf(habit);\n      const count = habits[index].count - 1;\n      habits[index].count = count < 0 ? 0 : count;\n      this.setState({\n        habits: habits\n      });\n      let habitCount = 0;\n\n      for (let i = 0; i < habits.length; i++) {\n        if (habits[i].count > 0) {\n          habitCount++;\n        }\n      }\n\n      this.setState({\n        habitCount\n      });\n    };\n\n    this.handleDelete = habit => {\n      //console.log(`handleDelete ${habit.name}`);\n      const habits = this.state.habits.filter(item => item.id !== habit.id);\n      this.setState({\n        habits: habits\n      });\n      let habitCount = 0;\n\n      for (let i = 0; i < habits.length; i++) {\n        if (habits[i].count > 0) {\n          habitCount++;\n        }\n      }\n\n      this.setState({\n        habitCount\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        habitCount: this.state.habitCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"habit-add\",\n        placeholder: \"Habit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"habit-button\",\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.habits.map(habit => /*#__PURE__*/_jsxDEV(Habit, {\n          /* habit이라는 props에 habit(map의 item) 전달, 배열인 경우 prop key값 지정 */\n          habit: habit,\n          onIncrement: this.handleIncrement,\n          onDecrement: this.handleDecrement,\n          onDelete: this.handleDelete\n        }, habit.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Habits;","map":{"version":3,"names":["React","Component","Habit","Navbar","Habits","state","habits","id","name","count","habitCount","handleIncrement","habit","index","indexOf","setState","i","length","handleDecrement","handleDelete","filter","item","render","map"],"sources":["C:/reactProject/react-basic/habit-tracker/src/components/habits.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Habit from './habit';\r\nimport Navbar from './navbar';\r\n\r\nclass Habits extends Component {\r\n    state = {\r\n        habits: [ // 배열일 경우 key 값을 지정해줘야 함. 고유의 값으로! (index는 key 값이 될 수 없음)\r\n            {id: 1, name: 'Reading', count: 0},\r\n            {id: 2, name: 'Running', count: 0},\r\n            {id: 3, name: 'Coding', count: 0},\r\n        ],\r\n        habitCount: 0,\r\n    };\r\n\r\n    handleIncrement = (habit) => { //callback 함수\r\n       //console.log(`handleIncrement ${habit.name}`);\r\n\r\n        // state를 직접 수정 (이 방법 사용X)\r\n        // habit.count++;\r\n        // this.setState(this.state);\r\n        \r\n        // react에서는 state를 직접 수정하면 안됌. 따라서 위 주석과 같이 코딩하지 않고 아래와 같이 새로운 배열을 만들어 수정\r\n        const habits = [...this.state.habits]; // ... : spread operator : 각각의 데이터를 복사\r\n        const index = habits.indexOf(habit);\r\n        habits[index].count++;\r\n        this.setState({habits: habits}); // key:value = habits(state에 정의된 habits 배열명) : habits (새로 정의한 배열명)\r\n        // =  this.setState({habits}); - key와 value의 이름이 같을 경우 하나로 생략 가능\r\n\r\n        let habitCount = 0;\r\n        for (let i=0; i<habits.length; i++){\r\n            if(habits[i].count > 0){\r\n                habitCount++;\r\n            }\r\n        }\r\n        this.setState({habitCount});\r\n    };\r\n\r\n    handleDecrement = (habit) => {\r\n        //console.log(`handleDecrement ${habit.name}`);\r\n\r\n        const habits = [...this.state.habits];\r\n        const index = habits.indexOf(habit);\r\n        const count = habits[index].count -1;\r\n        habits[index].count = count < 0 ? 0 : count;\r\n        this.setState({habits:habits});\r\n\r\n        let habitCount = 0;\r\n        for (let i=0; i<habits.length; i++){\r\n            if(habits[i].count > 0){\r\n                habitCount++;\r\n            }\r\n        }\r\n        this.setState({habitCount});\r\n    };\r\n\r\n    handleDelete = (habit) => {\r\n        //console.log(`handleDelete ${habit.name}`);\r\n\r\n        const habits = this.state.habits.filter(item => item.id !== habit.id);\r\n        this.setState({habits:habits});\r\n\r\n        let habitCount = 0;\r\n        for (let i=0; i<habits.length; i++){\r\n            if(habits[i].count > 0){\r\n                habitCount++;\r\n            }\r\n        }\r\n        this.setState({habitCount});\r\n    };\r\n\r\n\r\n    render() {\r\n        return ( \r\n            <>\r\n                <Navbar habitCount={this.state.habitCount}/>\r\n                <input className=\"habit-add\" placeholder='Habit'/>\r\n                <button className=\"habit-button\">Add</button>\r\n                <ul>\r\n                    {this.state.habits.map(habit => (\r\n                        <Habit\r\n                            key={habit.id} /* habit이라는 props에 habit(map의 item) 전달, 배열인 경우 prop key값 지정 */\r\n                            habit={habit}\r\n                            onIncrement={this.handleIncrement}\r\n                            onDecrement={this.handleDecrement}\r\n                            onDelete={this.handleDelete} />\r\n                    ))}\r\n                </ul>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Habits;"],"mappings":"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"},"metadata":{},"sourceType":"module"}